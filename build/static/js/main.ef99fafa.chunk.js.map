{"version":3,"sources":["components/PBN/PBN.tsx","components/imageLoader/imageLoader.tsx","components/imageLoader/imagePicker.tsx","components/imageLoader/palleteSize.tsx","app/App.tsx","reportWebVitals.ts","index.tsx","components/PBN/Picture.tsx","components/PBN/PBNRenderer.tsx"],"names":["kmeans","require","encode","colorsSame","left","right","r","g","b","a","PBN","props","baseImage","coloredImage","pbnImage","pallete","palleteSize","state","status","console","log","tempState","this","setState","length","Picture","fromPicture","y","height","x","width","setPixelToClosestColor","generatePBNImage","error","visited","Array","i","temp","fill","regions","region","findOutline","push","black","j","outline","p","setPixel","pic","startX","startY","result","points","pos","color","getPixel","directions","queue","pop","dir","newPoint","neighborColor","type","undefined","buf","Buffer","from","data","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","dispatchEvent","MouseEvent","bubbles","cancelable","view","window","removeChild","setTexture","redrawCanvas","err","res","colorPallete","index","c","centroid","Math","round","Object","assign","generateColoredImage","num","showImage","jimp","fromJimp","clusterize","toRGBAVector","k","kmeansCallbackFactory","fluid","className","imageCallback","imageUploadCallbackFactory","palleteSizeUpdatedCallback","palleteSizeCallbackFactory","defaultSize","onClick","kickoffGeneration","pickerCallback","pickerCallbackFactory","disabled","generateDownloadLinks","React","Component","ImageLoader","id","onChange","event","persist","currentTarget","files","file","fr","FileReader","readAsArrayBuffer","onload","imgBuffer","Jimp","read","value","message","onerror","ImagePicker","useState","current","setCurrent","name","PalleteSize","numColors","setNumColors","Group","controlId","Label","Control","max","min","defaultValue","e","App","Container","Row","Col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","_width","_height","_data","Uint8Array","colors","pixelColor","closestDistance","closestIndex","tempC","distance","sqrt","pow","newColor","getWidth","getHeight","intToRGBA","getPixelColor","other","canvasId","texture","textureLocation","vertexBuffer","indexBuffer","verts","faces","projectionMat","mat4","create","projectionLocation","viewMat","viewLocation","aspectRatio","aspectRatioLocation","picture","canvas","gl","getContext","largestSide","format","RGBA","srcFormat","srcType","UNSIGNED_BYTE","bindTexture","TEXTURE_2D","texImage2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","activeTexture","TEXTURE0","uniform1i","uniformMatrix4fv","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","clearColor","enable","DEPTH_TEST","clear","COLOR_BUFFER_BIT","viewport","drawElements","TRIANGLES","UNSIGNED_SHORT","PBNRenderer","String","useEffect","ortho","eye","vec3","fromValues","center","up","lookAt","identity","createBuffer","bufferData","Float32Array","STATIC_DRAW","Uint16Array","planeVertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","compiled","getShaderParameter","COMPILE_STATUS","planeFragShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","useProgram","getProgramParameter","LINK_STATUS","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","getUniformLocation","createTexture","getProgramInfoLog","getShaderInfoLog","initGLCanvas"],"mappings":"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","file":"static/js/main.ef99fafa.chunk.js","sourcesContent":["import React from \"react\";\nimport {PBNRenderer, setTexture, redrawCanvas} from './PBNRenderer';\nimport {ImageLoader} from '../imageLoader/imageLoader';\nimport Jimp from \"jimp\";\nimport { Picture } from \"./Picture\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nimport { ImagePicker } from \"../imageLoader/imagePicker\";\nimport { PalleteSize } from \"../imageLoader/palleteSize\";\n// import { URL } from \"url\";\n\nconst kmeans = require(\"node-kmeans\"); // Ew, gross javascript, but hey it works\n// This interface helps us with typing the results\ninterface kMeanResult {\n    centroid : number[],\n}\n\nlet encode = require('image-encode') // Another unfortunate js library\n\ninterface Point {\n    x : number;\n    y : number;\n}\n\ninterface Region {\n    points : Point[];\n    outline : Point[];\n}\n\nconst defaultPalleteSize = 10;\n\n// Really just a copy from JIMP\nexport interface RGBA {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n}\n\ninterface PBNState {\n    status: string;\n}\n\nconst colorsSame = (left : RGBA, right : RGBA) : boolean => {\n    let result = left.r === right.r &&\n                 left.g === right.g &&\n                 left.b === right.b &&\n                 left.a === right.a;\n    return result;\n};\n\nexport class PBN extends React.Component<{}, PBNState> {\n    baseImage : Picture | undefined;\n    coloredImage : Picture | undefined;\n    pbnImage : Picture | undefined;\n    pallete : RGBA[];\n    palleteSize : number = defaultPalleteSize;\n\n    constructor(props : any) {\n        super(props);\n        this.pallete = [];\n        this.state = {status: \"Awaiting Input\"};\n    }\n\n    private generateColoredImage() {\n        console.log(\"Generating colored image\");\n        let tempState = this.state as PBNState;\n        tempState.status = \"Generating colored image...\";\n        this.setState(tempState);\n\n        if (!this.baseImage || this.pallete.length === 0) {\n            console.error(\"Cannot generate colored image without base image or color pallete.\");\n            return;\n        }\n\n        this.coloredImage = Picture.fromPicture(this.baseImage);\n        for (let y = 0; y < this.coloredImage.height; ++y) {\n            for (let x = 0; x < this.coloredImage.width; ++x) {\n                this.coloredImage.setPixelToClosestColor(x, y, this.pallete);\n            }\n        }\n\n        tempState = this.state as PBNState;\n        tempState.status = \"Finished generating colored image.\";\n        this.setState(tempState);\n\n        this.generatePBNImage();\n    }\n\n    private generatePBNImage() {\n        console.log(\"Generating PBN image...\");\n        let tempState = this.state as PBNState;\n        tempState.status = \"Generating PBN image...\";\n        this.setState(tempState);\n\n        if (!this.coloredImage) {\n            console.error(\"Cannot generate PBN Image without the colored image.\");\n            return;\n        }\n        var visited = Array<Array<boolean>>(this.coloredImage.width);\n        for (let i=0; i < this.coloredImage.width; ++i) {\n            let temp = Array<boolean>(this.coloredImage.height);\n            temp.fill(false);\n            visited[i] = temp;\n        }\n\n        var regions : Region[] = [];\n        for (let x=0; x<this.coloredImage.width; ++x) {\n            for (let y=0; y<this.coloredImage.height; ++y) {\n                let region = this.findOutline(this.coloredImage, visited, x, y);\n                if (region) {\n                    regions.push(region);\n                }\n            }\n        }\n        \n        this.pbnImage = new Picture(this.coloredImage.width, this.coloredImage.height);\n        const white = {r:255, g:255, b:255, a:255};\n        const black = {r:0, g:0, b:0, a:255};\n        this.pbnImage.fill(white);\n        for (let i=0; i < regions.length; ++i) {\n            let region = regions[i];\n            for (let j=0; j< region.outline.length; ++j) {\n                let p = region.outline[j];\n                this.pbnImage.setPixel(p.x, p.y, black);\n            }\n        }\n\n        tempState = this.state as PBNState;\n        tempState.status = \"Finished generatign PBN image.\";\n        this.setState(tempState);\n    }\n\n    private findOutline(pic : Picture, visited : boolean[][], startX : number, startY : number) : Region | null {\n        let result : Region = {points: [], outline: []};\n        let pos : Point = {x : startX, y : startY}; \n        let color = pic.getPixel(pos.x, pos.y);\n\n        if (visited[pos.x][pos.y]) {\n            return null;\n        }\n\n\n        let directions : Point[] = [{x : -1, y :  0},\n                                    {x :  0, y :  1},\n                                    {x :  1, y :  0},\n                                    {x :  0, y : -1}];\n        let startPos : Point = {x: pos.x, y: pos.y};\n        let queue = [startPos];\n        while(queue.length > 0) {\n            // console.log(\"Visiting: \" + pos.x + \", \" + pos.y)\n            pos = queue.pop() as Point;\n            visited[pos.x][pos.y] = true;\n            result.points.push(pos);\n            for (let i=0; i < directions.length; ++i) {\n                let dir = directions[i];\n                let newPoint = {x : (pos.x + dir.x), y : (pos.y + dir.y)};\n                let neighborColor = pic.getPixel(newPoint.x, newPoint.y);\n                if (newPoint.x >= 0 && newPoint.y >= 0 && newPoint.x < pic.width && newPoint.y < pic.height &&\n                    colorsSame(neighborColor, color) && (!visited[newPoint.x][newPoint.y])) {\n                    queue.push(newPoint);\n                }\n                if (newPoint.x <= 0 || newPoint.y <= 0 || newPoint.x >= pic.width || newPoint.y >= pic.height ||\n                    !colorsSame(neighborColor, color)) {\n                    result.outline.push(pos);\n                }\n            }\n        }       \n\n        return result;\n    }\n\n    private generateDownloadLinks(type : string) {\n        // Ideally type should be something like an enum instead\n        let pic : Picture | undefined = undefined;\n        if (type === \"pbn\") {\n            pic = this.pbnImage;\n        }\n        else if(type === \"colored\") {\n            pic = this.coloredImage;\n        }\n        if (!pic) {\n            return;\n        }\n\n        let buf = Buffer.from(encode(pic.data, [pic.width, pic.height], 'png'));\n        let blob = new Blob([buf]);\n        let url = URL.createObjectURL(blob);\n\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.download = type + \".png\";\n        document.body.appendChild(link);\n        link.dispatchEvent(\n            new MouseEvent('click', {\n                bubbles: true,\n                cancelable: true,\n                view: window\n            })\n        )\n        document.body.removeChild(link);\n\n        console.log(\"Download Complete\");\n\n    }\n\n    private showImage(pic : Picture | undefined) {\n        if (!pic) {\n            return;\n        }\n\n        setTexture(pic);\n        redrawCanvas();\n    }\n\n    private kmeansCallbackFactory () {\n        let tempState = this.state as PBNState;\n        tempState.status = \"Picking color palette (this may take a while)...\";\n        this.setState(tempState);\n\n        const result = (err : any, res : kMeanResult[]) =>{\n            if (err) {\n                console.error(err);\n                let tempState = this.state as PBNState;\n                tempState.status = \"Error occurred while picking colors.\";\n                this.setState(tempState);\n                return;\n            }\n            var colorPallete = new Array<RGBA>(res.length);\n            for (let index in res) {\n                let c = res[index].centroid;\n                var color = {\n                    r: Math.round(c[0]),\n                    g: Math.round(c[1]),\n                    b: Math.round(c[2]),\n                    a: Math.round(c[3])\n                };\n                colorPallete[index] = color;\n            }\n            Object.assign(this.pallete, colorPallete);\n\n            let tempState = this.state as PBNState;\n            tempState.status = \"Finished picking color pallete\";\n            this.setState(tempState);\n\n            this.generateColoredImage();\n        }\n        return result;\n    }\n\n    private palleteSizeCallbackFactory () {\n        const result = (num : number) => {\n            \n            this.palleteSize = num;\n        }\n        return result;\n    }\n\n    private pickerCallbackFactory () {\n        const result = (type : string) => {\n            if (type === \"base\") {\n                this.showImage(this.baseImage);\n            }\n            else if (type === \"color\") {\n                this.showImage(this.coloredImage);\n            }\n            else if (type === \"pbn\") {\n                this.showImage(this.pbnImage);\n            }\n\n        }\n        return result;\n    }\n\n    private imageUploadCallbackFactory () {\n        const result = (jimp : Jimp) => {\n            let tempState = this.state as PBNState;\n            tempState.status = \"Loading image...\";\n            this.setState(tempState);\n\n            this.baseImage = Picture.fromJimp(jimp);\n            this.showImage(this.baseImage);\n\n            tempState = this.state as PBNState;\n            tempState.status = \"Image loaded, waiting to start.\";\n            this.setState(tempState);\n        }\n\n        return result;\n    }\n\n    private kickoffGeneration() {\n        if (!this.baseImage){\n            return;\n        }\n        kmeans.clusterize(this.baseImage.toRGBAVector(), {k:this.palleteSize}, this.kmeansCallbackFactory());\n        console.log(\"Started Finding Colors.\");\n    }\n\n    render () {\n        const status = this.state.status;\n        return (\n            <Container fluid>\n                <Row className=\"justify-content-center\">\n                    <Col>\n                        <ImageLoader imageCallback={this.imageUploadCallbackFactory()}/>\n                        <PalleteSize palleteSizeUpdatedCallback={this.palleteSizeCallbackFactory()} defaultSize={defaultPalleteSize}/>\n                        <Container>\n                            <Row className = \"justify-content-center\">\n                                <Col>\n                                    <Button onClick={() => this.kickoffGeneration()} >Create PBN Image</Button>                           \n                                </Col>\n                            </Row>\n                        </Container>\n                        <ImagePicker pickerCallback = {this.pickerCallbackFactory()}/>\n                        <Container>\n                            <Row className = \"justify-content-center\">\n                                <Col>\n                                    <h3 className=\"text-center\">Status: {status}</h3>                           \n                                </Col>\n                            </Row>\n                        </Container>\n                        <PBNRenderer/>\n                        <Container>\n                            <Row className = \"justify-content-center py-3\">\n                                <Col>\n                                    <Button disabled={!this.coloredImage} onClick={() => this.generateDownloadLinks(\"colored\")} >Download Colored image</Button>\n                                </Col>\n                                <Col>\n                                    <Button disabled={!this.pbnImage} onClick={() => this.generateDownloadLinks(\"pbn\")} >Download PBN image</Button>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </Col>\n                </Row>\n                \n            </Container>\n        );\n    }\n}\n\n","import React from \"react\";\nimport Jimp from \"jimp\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n// import {RGBA} from \"../PBN/PBN\";\n\ninterface ImageLoaderProps {\n    imageCallback : (jimp : Jimp) => void;\n}\n\nexport const ImageLoader : React.FC<ImageLoaderProps> = (props) => {\n    const changeFunc = (event : React.ChangeEvent<HTMLInputElement>) => {\n        event.persist();\n        if (!event.currentTarget.files || event.currentTarget.files.length === 0)\n            return;\n        const file = event.currentTarget.files[0];\n        const fr = new FileReader();\n        fr.readAsArrayBuffer(file);\n        fr.onload = () => {\n            // console.log(fr.result);\n                const imgBuffer = fr.result as Buffer;\n                Jimp.read(imgBuffer, (err, value) => {\n                    if (err){\n                        console.error(\"Jimp Failed to Load Image with Message: \" + err.message);\n                        return;\n                    }\n                    \n                    props.imageCallback(value);\n                })\n            \n\n        };\n        fr.onerror = () => {\n            console.error(\"File Reader encountered an eorror\");\n        };\n\n        // console.log(file);\n    }\n\n    return (\n        <Container className=\"py-3\">\n            <Row className = \"justify-content-center\">\n                <Col>\n                    <input type=\"file\" id=\"input\" onChange={changeFunc}/>\n                </Col>\n            </Row>\n            \n        </Container>\n    )\n}\n","import React, { useState } from \"react\";\nimport { Col, Container, Row, ToggleButton, ToggleButtonGroup} from \"react-bootstrap\";\n// import {RGBA} from \"../PBN/PBN\";\n\ninterface ImagePickerProps {\n    pickerCallback : (type : string) => void;\n}\n\nexport const ImagePicker : React.FC<ImagePickerProps> = (props) => {\n    const [current , setCurrent] = useState(\"base\");\n\n    const buttonChange = (value : string) => {\n        setCurrent(value);\n        props.pickerCallback(value);\n\n    }\n\n    return (\n        <Container className=\"py-3\">\n            <Row className = \"justify-content-center\">\n                <Col>\n                    <ToggleButtonGroup className=\"mb-2\" value={current} onChange={buttonChange} name=\"options\">\n                        <ToggleButton type=\"radio\" value=\"base\" >\n                            Show Base Image\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\" value=\"color\" >\n                            Show Color Image\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\" value=\"pbn\"  >\n                            Show PBN Image\n                        </ToggleButton>\n                    </ToggleButtonGroup>           \n                </Col>\n            </Row>\n            \n        </Container>\n    )\n}\n","import React, { useState } from \"react\";\nimport { Col, Container, Form, Row} from \"react-bootstrap\";\n// import {RGBA} from \"../PBN/PBN\";\n\ninterface PalleteSizeProps {\n    palleteSizeUpdatedCallback : (num : number) => void;\n    defaultSize : number;\n}\n\nexport const PalleteSize : React.FC<PalleteSizeProps> = (props) => {\n    const [numColors , setNumColors] = useState(props.defaultSize);\n\n    const numColorsUpdated  = (e : any) => {\n        let num = e.currentTarget.value;\n        props.palleteSizeUpdatedCallback(num);\n        setNumColors(num);\n    }\n\n\n    return (\n        <Container className=\"py-3\">\n            <Row className = \"justify-content-center\">\n                <Col>\n                    <Form>\n                        <Form.Group controlId=\"palleteSize\">\n                            <Form.Label>Pallete Size (how many colors are in your pallete): {numColors}</Form.Label>\n                            <Form.Control type=\"range\" max={30} min={2} defaultValue={numColors} onChange={numColorsUpdated}/>\n                        </Form.Group>\n                    </Form>     \n                </Col>\n            </Row>\n            \n        </Container>\n    )\n}","import React from 'react';\n\nimport './App.css';\nimport {PBN} from \"../components/PBN/PBN\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Col, Container, Row } from 'react-bootstrap';\n\nfunction App() {\n\n  \n\n  return (\n    <Container className=\"App py-3\">\n      <Row className=\"justify-content-center\">\n        <Col>\n          <h1 className=\"display-1 text-center\">PBN App</h1>\n          <PBN/>\n        </Col>\n      </Row>\n      \n      \n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import Jimp from \"jimp\";\nimport { RGBA } from \"./PBN\";\n\nexport class Picture {\n    readonly width: number;\n    readonly height: number;\n    readonly data: Uint8Array;\n\n    static fromJimp(jimp: Jimp) : Picture {\n        var result = new Picture(jimp.getWidth(), jimp.getHeight());\n        for (let y=0; y < result.height; ++y){\n            for (let x=0; x < result.width; ++x) {\n                let color = Jimp.intToRGBA(jimp.getPixelColor(x, y));\n                result.setPixel(x, y, color);\n            }\n        }\n        return result;\n    }\n\n    static fromPicture(other: Picture) : Picture {\n        var result = new Picture(other.width, other.height);\n        for (let y=0; y < result.height; ++y){\n            for (let x=0; x < result.width; ++x) {\n                let color = other.getPixel(x, y);\n                result.setPixel(x, y, color);\n            }\n        }\n        return result;\n    }\n\n    constructor(readonly _width : number, readonly _height : number, readonly _data?: Uint8Array) {\n        this.width = _width;\n        this.height = _height;\n        this.data = new Uint8Array(_width * _height * 4);\n        if (_data) {\n            for (let i=0; i < _data.length; ++i) {\n                this.data[i] = _data[i];\n            }\n        }\n    }\n\n    setPixel(x : number, y : number, color : RGBA) {\n        let index = (y * this.width + x) * 4;\n        this.data[index + 0] = color.r;\n        this.data[index + 1] = color.g;\n        this.data[index + 2] = color.b;\n        this.data[index + 3] = color.a;\n    }\n\n    setPixelToClosestColor(x : number, y : number, colors : RGBA[]) {\n        let pixelColor = this.getPixel(x, y);\n        let closestDistance = 1000;\n        let closestIndex = -1;\n        for (let index = 0; index < colors.length; ++index) {\n            let tempC = colors[index];\n            let distance = Math.sqrt(Math.pow((pixelColor.r - tempC.r), 2) +\n                                     Math.pow((pixelColor.g - tempC.g), 2) +\n                                     Math.pow((pixelColor.b - tempC.b), 2));\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestIndex = index;\n            }\n        }\n\n        let newColor = colors[closestIndex];\n        this.setPixel(x, y, newColor);\n    }\n\n    getPixel(x : number, y : number) : RGBA {\n        let index = (y * this.width + x) * 4;\n        var color : RGBA = { r:this.data[index + 0],\n                             g:this.data[index + 1],\n                             b:this.data[index + 2],\n                             a:this.data[index + 3]\n                           };\n        return color;\n    }\n\n    toRGBAVector() : Array<Array<number>> {\n        var result = new Array(this.data.length/4);\n        for (let y=0; y<this.height; ++y) {\n            for (let x=0; x < this.width; ++x) {\n                let index = (y * this.width + x) * 4;\n                var color = [this.data[index + 0],\n                             this.data[index + 1],\n                             this.data[index + 2],\n                             this.data[index + 3]];\n                result[index/4] = color;\n            }\n        }\n        return result;\n    }\n\n    fill(color : RGBA) {\n        for (let x=0; x<this.width; ++x) {\n            for (let y=0; y < this.height; ++y) {\n                this.setPixel(x,y, color);\n            }\n        }\n    }\n\n}","import React, {useEffect} from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\n// import { RGBA } from \"./PBN\";\nimport { Picture } from \"./Picture\";\nimport { vec3, mat4 } from \"gl-matrix\";\n\nconst planeVertShaderCode = `\nuniform mat4 proj;\nuniform mat4 view;\nuniform mat4 aspectRatio;\nattribute vec2 coordinates;\n\nvarying highp vec2 uv;\nvoid main() {\n    \n    highp vec4 pos = vec4(coordinates.x, coordinates.y , -1.0, 1.0);\n    gl_Position = proj * view * aspectRatio * pos;\n\n    uv = (coordinates + 1.0)/2.0;\n    uv.y = 1.0 - uv.y;\n}\n`;\n\nconst planeFragShaderCode = `\nuniform sampler2D tex;\nvarying highp vec2 uv;\nconst highp vec3 bgColor = vec3(0.9, 0.9, 0.9); \nvoid main() {\n    highp vec4 color = texture2D(tex, uv);\n    gl_FragColor = vec4((gl_FragCoord.x)/400.0, 1.0 - (gl_FragCoord.y)/400.0, 0.0, 1.0);\n    gl_FragColor = color;\n}\n`;\n\n\n\nvar canvasId : string;\nvar texture : WebGLTexture | null = null;\nvar textureLocation : WebGLUniformLocation | null = null;\nvar vertexBuffer : WebGLBuffer | null = null;\nvar indexBuffer : WebGLBuffer | null = null;\nvar verts : number[] = [-1.0, 1.0,  1.0, 1.0,  -1.0, -1.0,  1.0, -1.0];\nvar faces : number[] = [0, 1, 2, 1, 3, 2];\nvar projectionMat : mat4 = mat4.create();\nvar projectionLocation : WebGLUniformLocation | null = null;\nvar viewMat : mat4 = mat4.create();\nvar viewLocation : WebGLUniformLocation | null = null;\nvar aspectRatio : mat4 = mat4.create();\nvar aspectRatioLocation : WebGLUniformLocation | null = null;\n\n\nconst initGLCanvas = (id : string) => {\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement | null;\n    if (!canvas){\n        console.log(\"Failed to find canvas to init webGL.\");\n        return;\n    }\n\n    const gl = canvas.getContext(\"webgl\") as WebGLRenderingContext | null;\n    if (!gl){\n        console.error(\"Failed to get webgl context\");\n        return;\n    }\n\n    // Generate mats\n    mat4.ortho(projectionMat, -1, 1, -1, 1, 0.0001, 3);\n    let eye = vec3.fromValues(0, 0, 0);\n    let center = vec3.fromValues(0, 0, -1);\n    let up = vec3.fromValues(0, 1, 0);\n    mat4.lookAt(viewMat, eye, center, up);\n    mat4.identity(aspectRatio);\n    \n    // Create & Bind the VBO\n    vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verts), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null); // unbind buffer\n\n    // Create & Bind the VAO\n    indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(faces), gl.STATIC_DRAW);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null); // unbind buffer\n\n    // Set up shaders\n    var planeVertShader = gl.createShader(gl.VERTEX_SHADER);\n    if (!planeVertShader){\n        console.error(\"Vertex Shader failed to load.\")\n        return;\n    }\n    gl.shaderSource(planeVertShader, planeVertShaderCode);\n    gl.compileShader(planeVertShader);\n    let compiled = gl.getShaderParameter(planeVertShader, gl.COMPILE_STATUS);\n    if (!compiled) {\n        console.error(gl.getShaderInfoLog(planeVertShader));\n        return;\n    }\n\n    var planeFragShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!planeFragShader){\n        console.error(\"Fragment Shader failed to load.\")\n        return;\n    }\n    gl.shaderSource(planeFragShader, planeFragShaderCode);\n    gl.compileShader(planeFragShader);\n    compiled = gl.getShaderParameter(planeFragShader, gl.COMPILE_STATUS);\n    if (!compiled) {\n        console.error(gl.getShaderInfoLog(planeFragShader));\n        return;\n    }\n\n    // Create, attach, link, and use the shader program\n    var shaderProgram = gl.createProgram();\n    if (!shaderProgram) {\n        console.error(\"Couldn't create the shader program.\")\n        return;\n    }\n    gl.attachShader(shaderProgram, planeVertShader);\n    gl.attachShader(shaderProgram, planeFragShader);\n    gl.linkProgram(shaderProgram);\n    gl.useProgram(shaderProgram);\n    let linked = gl.getProgramParameter(shaderProgram, gl.LINK_STATUS);\n    if (!linked) {\n        console.error(gl.getProgramInfoLog(shaderProgram));\n        return;\n    }\n\n    // Associate shader program with buffer objects\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    var coord = gl.getAttribLocation(shaderProgram, \"coordinates\");\n    gl.vertexAttribPointer(coord, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(coord);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    // Get texture location and pass the uniform in\n    textureLocation = gl.getUniformLocation(shaderProgram, \"tex\");\n    projectionLocation = gl.getUniformLocation(shaderProgram, \"proj\");\n    viewLocation = gl.getUniformLocation(shaderProgram, \"view\");\n    aspectRatioLocation = gl.getUniformLocation(shaderProgram, \"aspectRatio\");\n    \n    texture = gl.createTexture();\n    if (!texture){\n        console.error(\"GL Failed to created a texture.\");\n        return;\n    }\n    let pic = new Picture(1, 1, new Uint8Array([255,255,255,255]));\n    setTexture(pic);\n\n    // DRAW THE DAMN THING\n    redrawCanvas();\n\n    \n}\n\nexport const setTexture = (picture : Picture) => {\n    if (!texture) {\n        console.error(\"Cannot set texture until it has been instantiated in GL.\");\n        return;\n    }\n\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement | null;\n    if (!canvas){\n        console.log(\"Failed to find canvas to init webGL.\");\n        return;\n    }\n\n    const gl = canvas.getContext(\"webgl\") as WebGLRenderingContext | null;\n    if (!gl){\n        console.error(\"Failed to get webgl context\");\n        return;\n    }\n\n    // Set aspect ratio\n    let largestSide = (picture.width > picture.height)? picture.width : picture.height;\n    aspectRatio[0] = picture.width/largestSide;\n    aspectRatio[5] = picture.height/largestSide;\n\n    const level = 0;\n    const format = gl.RGBA;\n    const border = 0;\n    const srcFormat = gl.RGBA;\n    const srcType = gl.UNSIGNED_BYTE;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, level, format, picture.width, picture.height, border, srcFormat, srcType, picture.data);\n\n    // gl.NEAREST is also allowed, instead of gl.LINEAR, as neither mipmap.\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    // gl.NEAREST is also allowed, instead of gl.LINEAR, as neither mipmap.\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    // Prevents s-coordinate wrapping (repeating).\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    // Prevents t-coordinate wrapping (repeating).\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    \n}\n\nexport const redrawCanvas = () => {\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement | null;\n    if (!canvas){\n        console.log(\"Failed to find canvas to init webGL.\");\n        return;\n    }\n\n    const gl = canvas.getContext(\"webgl\") as WebGLRenderingContext | null;\n    if (!gl){\n        console.error(\"Failed to get webgl context\");\n        return;\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.uniform1i(textureLocation, 0);\n\n    gl.uniformMatrix4fv(projectionLocation, false, projectionMat);\n    gl.uniformMatrix4fv(viewLocation, false, viewMat);\n    gl.uniformMatrix4fv(aspectRatioLocation, false, aspectRatio);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n    gl.clearColor(0.9, 0.9, 0.9, 1.0);\n    gl.enable(gl.DEPTH_TEST);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0, 0, canvas.width, canvas.height);\n    gl.drawElements(gl.TRIANGLES, faces.length, gl.UNSIGNED_SHORT, 0);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n}\n\ninterface PBNRendererProps {\n    canvasId ?: string,\n}\n\nexport const getContext : (type: string) => RenderingContext | null = (type) => {\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement | null;\n    if (!canvas)\n        return null;\n    \n    console.log(\"Found the canvas\");\n    const result = canvas.getContext(type) as RenderingContext | null;\n\n    return result;\n}\n\nexport const PBNRenderer : React.FC<PBNRendererProps> = (props) => {\n\n    canvasId = String(props.canvasId);\n    if (canvasId === \"undefined\") {\n        canvasId = \"gl-canvas\";\n    }\n\n    useEffect ( () => {\n        // Code to run once component is mounted\n        initGLCanvas(canvasId);\n    }, []);\n\n    return (\n        <Container>\n            <Row className=\"justify-content-center\">\n                <p><i>Note: PBN outlines will look better once downloaded. The image below is just a preview.</i></p>          \n                <canvas id={canvasId} className=\"p-0 rounded PBNRenderer\"/>\n            </Row>\n        </Container>\n    );\n}"],"sourceRoot":""}